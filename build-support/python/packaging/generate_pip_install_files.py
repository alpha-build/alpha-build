# pylint: disable=trailing-whitespace
from dataclasses import dataclass
from pathlib import Path
from textwrap import dedent
from typing import Sequence

REPO_ROOT = Path(__file__).parents[3]


@dataclass
class PyLibrary:
    lib_name: str
    sources_root: Path
    version: str
    packages: Sequence[str]
    description: str = ''
    python_requires: str = '>=3.8'
    requirements_file: str = 'autogenerated-requirements.txt'

    def make_py_typed(self) -> None:
        file = self.sources_root / self.lib_name / 'py.typed'
        file.write_text('')

    def make_setup_py(self) -> str:
        contents = dedent(
            f"""
        from pathlib import Path

        from setuptools import setup

        LIB_ROOT = Path(__file__).parent
        REQS_FILE = LIB_ROOT / 'autogenerated-requirements.txt'


        def main() -> None:
            setup(
                name='{self.lib_name}',
                version='{self.version}',
                packages={self.packages},
                python_requires='{self.python_requires}',
                install_requires=REQS_FILE.read_text(),
                zip_safe=False,  # for mypy
                package_data={{'{self.lib_name}': ['py.typed']}},  # expose types to users
                author='Cristian Matache',
                author_email='cm@example.com',
                description='{self.description}',
                long_description='',
            )


        if __name__ == '__main__':
            main()
        """
        )
        file = self.sources_root / 'setup.py'
        file.write_text(contents[1:])
        return contents


CONFIG = [
    PyLibrary(
        lib_name='py_utils',
        sources_root=REPO_ROOT / 'lib_py_utils',
        version='0.1',
        packages=['py_utils'],
    )
]


if __name__ == '__main__':
    for lib in CONFIG:
        lib.make_py_typed()
        lib.make_setup_py()
